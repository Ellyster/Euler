/************************************************************************************************************************************************
 * Problem 12 - Highly divisible triangular number 																								*
 *																																				*
 *                                    																											*
 * The sequence of triangle numbers is generated by adding the natural numbers. 																*
 * So the 7th triangle number wouldbe 1 + 2 + 3 + 4+ 6 + 7 = 28.																				*
 * The first ten termos would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...																		*
 * 																																				*
 * Let us list the factors of the the first seven triangle numbers:	       																		*
 * 1: 1 																																		*
 * 3: 1, 3 																																		*
 * 6: 1, 2, 3, 6																																*
 * 10: 1, 2, 5, 10																																*
 * 15: 1, 3, 5, 15 																																*
 * 21: 1, 3, 7, 21 																																*
 * 28: 1, 2, 4, 7, 14, 28																														* 
 * We can see that 28 is the first triangle number to have over five divisors.																	*
 * 																																				*
 * 																																				*
 * What is the value of the firs triangle number to have over five hundred divisors? 															*
 *																																		  		*
 * 																																		   		*
 * Author: Alonso J. Gragera Aguaza																												*
 * Date: 9/11/2012																																*
 ************************************************************************************************************************************************/


#include <iostream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

vector<int> divisors(int n)
{
	vector<int> d;
	vector<int> d_simetric;

	d.push_back(1);
	d_simetric.push_back(n);

	for (int i = 2; i < n/d.back(); ++i)
	{
		if (n % i == 0)
		{
			d.push_back(i);
			d_simetric.push_back(n/i);
		}
	}

	for (int i = 0; i < d_simetric.size(); ++i)
	{
		d.push_back(d_simetric[i]);
	}

	return d;
}

int TriangularNumber(int ndiv)
{
	int triangular = 1;
	for(int natural = 2; divisors(triangular).size() < ndiv; ++natural) 
	{
	    triangular += natural;
	}

	return triangular;
}

int main(int argc, char const *argv[])
{
	cout << "The first triangular number with more than 500 factors is: " << TriangularNumber(500) << endl;
	return 0;
}